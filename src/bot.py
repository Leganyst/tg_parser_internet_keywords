from pyrogram import Client, filters
from loguru import logger
from src.config import API_ID, API_HASH, OWNER_ID, KEYWORDS_FILE, FUZZY_THRESHOLD
from src.keywords import load_keywords, add_keyword, remove_keyword
from src.utils import enhanced_find_match, smart_find_match, analyze_match_quality
from src.quality_monitor import quality_logger
import sys
import logging
import os

logger.remove()
logger.add(sys.stdout, level="DEBUG", format="[{time:YYYY-MM-DD HH:mm:ss}] [{level}] {message}")

KEYWORDS = load_keywords(KEYWORDS_FILE)
MONITORED_CHAT_IDS = [] 

SESSION_FOLDER = os.path.join(os.getcwd(), "sessions")
os.makedirs(SESSION_FOLDER, exist_ok=True)


app = Client(
    name=os.path.join(SESSION_FOLDER, "userbot"),
    api_id=API_ID,
    api_hash=API_HASH
)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---

def owner_filter(_, __, message):
    logger.debug(f"owner_filter: from_user={getattr(message, 'from_user', None)}")
    return message.from_user and message.from_user.id == OWNER_ID

@app.on_message(filters.command("start") & filters.private)
def start_handler(client, message):
    logger.info(f"/start –æ—Ç {message.from_user.id if message.from_user else 'N/A'}")
    message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

@app.on_message(filters.command("addword") & filters.create(owner_filter))
def add_word_handler(client, message):
    logger.info(f"/addword –æ—Ç {message.from_user.id if message.from_user else 'N/A'}: {message.text}")

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    word = parts[1].strip()
    if add_keyword(word):
        logger.debug(f"–ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω: {word}")
        message.reply_text(f"–ö–ª—é—á '{word}' –¥–æ–±–∞–≤–ª–µ–Ω.")

        global KEYWORDS
        KEYWORDS = load_keywords("keywords.txt")
    else:
        logger.debug(f"–ö–ª—é—á –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (—É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç–æ): {word}")
        message.reply_text("–¢–∞–∫–æ–π –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.")

@app.on_message(filters.command("delword") & filters.create(owner_filter))
def del_word_handler(client, message):
    logger.info(f"/delword –æ—Ç {message.from_user.id if message.from_user else 'N/A'}: {message.text}")
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    word = parts[1].strip()
    if remove_keyword(word):
        logger.debug(f"–ö–ª—é—á —É–¥–∞–ª—ë–Ω: {word}")
        message.reply_text(f"–ö–ª—é—á '{word}' —É–¥–∞–ª—ë–Ω.")
        global KEYWORDS
        KEYWORDS = load_keywords("keywords.txt")
    else:
        logger.debug(f"–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {word}")
        message.reply_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@app.on_message(filters.command("showwords") & filters.create(owner_filter))
def show_words_handler(client, message):
    logger.info(f"/showwords –æ—Ç {message.from_user.id if message.from_user else 'N/A'}")
    keywords = load_keywords("keywords.txt")
    if not keywords:
        message.reply_text("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç.")
        return
    text = "\n".join(keywords)
    if len(text) > 4000:
        message.reply_text("–°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –≤—ã–≤–æ–¥–∞.")
    else:
        message.reply_text(text)

@app.on_message(filters.command(["addword", "addkey"]) & filters.private & filters.me)
def add_word_self_handler(client, message):
    """
    –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –ª—é–±–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –æ—Ç —Å–µ–±—è).
    –ü—Ä–∏–º–µ—Ä: /addword —Å–ª–æ–≤–æ
    """
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /addword –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
        return
    word = parts[1].strip()
    if add_keyword(word, KEYWORDS_FILE):
        message.reply_text(f"–ö–ª—é—á '{word}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        message.reply_text("–¢–∞–∫–æ–π –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.")

@app.on_message(filters.command(["delword", "delkey"]) & filters.private & filters.me)
def del_word_self_handler(client, message):
    """
    –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –ª—é–±–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –æ—Ç —Å–µ–±—è).
    –ü—Ä–∏–º–µ—Ä: /delword —Å–ª–æ–≤–æ
    """
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /delword –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
        return
    word = parts[1].strip()
    if remove_keyword(word, KEYWORDS_FILE):
        message.reply_text(f"–ö–ª—é—á '{word}' —É–¥–∞–ª—ë–Ω.")
    else:
        message.reply_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@app.on_message(filters.command(["showwords", "listkeys"]) & filters.private & filters.me)
def show_words_self_handler(client, message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
    """
    keywords = load_keywords(KEYWORDS_FILE)
    if not keywords:
        message.reply_text("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç.")
        return
    text = "\n".join(keywords)
    if len(text) > 4000:
        message.reply_text("–°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –≤—ã–≤–æ–¥–∞.")
    else:
        message.reply_text(text)

@app.on_message(filters.command(["addwords", "addkeys"]) & filters.private & filters.me)
def add_words_bulk_handler(client, message):
    """
    –î–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).
    –ü—Ä–∏–º–µ—Ä:
    /addwords
    —Å–ª–æ–≤–æ1
    —Å–ª–æ–≤–æ2
    —Å–ª–æ–≤–æ3
    –∏–ª–∏: /addwords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3
    """
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        return
    words = text[1].replace(",", "\n").splitlines()
    added, skipped = [], []
    for word in words:
        w = word.strip()
        if w:
            if add_keyword(w, KEYWORDS_FILE):
                added.append(w)
            else:
                skipped.append(w)
    reply = []
    if added:
        reply.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(added)}")
    if skipped:
        reply.append(f"–ü—Ä–æ–ø—É—â–µ–Ω—ã (—É–∂–µ –µ—Å—Ç—å/–ø—É—Å—Ç–æ): {', '.join(skipped)}")
    message.reply_text("\n".join(reply) if reply else "–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

@app.on_message(filters.command(["delwords", "delkeys"]) & filters.private & filters.me)
def del_words_bulk_handler(client, message):
    """
    –£–¥–∞–ª–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).
    –ü—Ä–∏–º–µ—Ä:
    /delwords
    —Å–ª–æ–≤–æ1
    —Å–ª–æ–≤–æ2
    –∏–ª–∏: /delwords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2
    """
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        return
    words = text[1].replace(",", "\n").splitlines()
    removed, not_found = [], []
    for word in words:
        w = word.strip()
        if w:
            if remove_keyword(w, KEYWORDS_FILE):
                removed.append(w)
            else:
                not_found.append(w)
    reply = []
    if removed:
        reply.append(f"–£–¥–∞–ª–µ–Ω—ã: {', '.join(removed)}")
    if not_found:
        reply.append(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(not_found)}")
    message.reply_text("\n".join(reply) if reply else "–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")

@app.on_message(filters.command(["help", "start"]) & filters.private & filters.me)
def help_self_handler(client, message):
    """
    –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º userbot.
    """
    help_text = (
        "Userbot: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (Saved Messages) –∏–ª–∏ –≤ –ª–∏—á–∫–µ –æ—Ç —Å–µ–±—è.\n\n"
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n"
        "/addword <—Å–ª–æ–≤–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á\n"
        "/delword <—Å–ª–æ–≤–æ> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á\n"
        "/addwords <—Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, ...> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n"
        "/delwords <—Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, ...> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n"
        "/showwords ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏\n\n"
        "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞:\n"
        "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n"
        "/clear_stats ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: /addwords –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ª–∞–≥–∏, –Ω–µ—Ç —Å–≤—è–∑–∏\n"
        "–ò–ª–∏:\n/addwords\n–∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n–ª–∞–≥–∏\n–Ω–µ—Ç —Å–≤—è–∑–∏\n"
        "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª keywords.txt."
    )
    message.reply_text(help_text)

@app.on_message(filters.command(["stats", "quality"]) & filters.private & filters.me)
def stats_handler(client, message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    """
    from src.quality_monitor import create_quality_report
    
    try:
        report = create_quality_report()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(report) > 4000:
            parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
                else:
                    message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
        else:
            message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:\n\n{report}")
            
    except Exception as e:
        message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@app.on_message(filters.command("clear_stats") & filters.private & filters.me)
def clear_stats_handler(client, message):
    """
    –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
    """
    import os
    
    log_file = "match_quality.log"
    if os.path.exists(log_file):
        os.remove(log_file)
        message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—á–∏—â–µ–Ω–∞.")
    else:
        message.reply_text("üìä –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@app.on_message(filters.text)
def all_messages_handler(client, message):
    logger.debug(f"all_messages_handler: chat_id={message.chat.id}, chat_type={message.chat.type}, user_id={getattr(message.from_user, 'id', None)}, text={message.text[:50] if message.text else ''}")
    # –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ chat_id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
    # if MONITORED_CHAT_IDS and message.chat.id not in MONITORED_CHAT_IDS:
    #     return
    
    KEYWORDS = load_keywords(KEYWORDS_FILE)
    text = message.text or ""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    matched = smart_find_match(text, KEYWORDS, threshold=FUZZY_THRESHOLD)
    
    if matched:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        quality_metrics = analyze_match_quality(text, matched)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_logger.log_match(text, matched, quality_metrics, is_false_positive=False)
        
        logger.info(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{matched}' –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type}) "
                   f"[–∫–∞—á–µ—Å—Ç–≤–æ: {quality_metrics['confidence'] if quality_metrics else 'unknown'}]")
        
        notify_text = (
            f"üîî –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É: '{matched}'\n"
            f"–ß–∞—Ç: {message.chat.title or message.chat.id} ({message.chat.type})\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name if message.from_user else 'N/A'}\n"
            f"–¢–µ–∫—Å—Ç:\n{text[:500]}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if quality_metrics and quality_metrics['confidence'] == 'low':
            notify_text += f"\n‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏"
        # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å message.id)
        if str(message.chat.id).startswith("-100") and hasattr(message, "id"):
            chat_id_num = str(message.chat.id)[4:]
            notify_text += f"\n[–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ](https://t.me/c/{chat_id_num}/{message.id})"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (Saved Messages)
        client.send_message("me", notify_text, disable_web_page_preview=True)
        # –ü—Ä—è–º–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            client.forward_messages("me", message.chat.id, message.id)
            logger.debug(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –∏–∑ —á–∞—Ç–∞ {message.chat.id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        except ValueError as e:
            if "Peer id invalid" in str(e):
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: Peer id invalid ({message.chat.id}). –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, userbot –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ Pyrogram –Ω–µ –≤–∏–¥–∏—Ç –µ–≥–æ –≤ —Å–µ—Å—Å–∏–∏. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {e}")
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
