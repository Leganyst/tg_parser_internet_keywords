from pyrogram import Client, filters
from loguru import logger
from src.config import API_ID, API_HASH, OWNER_ID, KEYWORDS_FILE, FUZZY_THRESHOLD
from src.keywords import load_keywords, add_keyword, remove_keyword
from src.utils import simple_keyword_match
import sys
import logging
import os

logger.remove()
logger.add(sys.stdout, level="DEBUG", format="[{time:YYYY-MM-DD HH:mm:ss}] [{level}] {message}")

def load_keywords_safe(file_path):
    try:
        return load_keywords(file_path)
    except UnicodeDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []

KEYWORDS = load_keywords(KEYWORDS_FILE)

PENDING_ACTIONS = {}

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---

async def owner_filter(_, __, message):
    logger.debug(f"owner_filter: from_user={getattr(message, 'from_user', None)}")
    return message.from_user and message.from_user.id == OWNER_ID

def register_handlers(app: Client):
    @app.on_message(filters.command("start") & filters.private)
    async def start_handler(client, message):
        logger.info(f"/start –æ—Ç {message.from_user.id if message.from_user else 'N/A'} –≤ —á–∞—Ç–µ {message.chat.id}")
        await message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

    @app.on_message(filters.command("addword") & filters.create(owner_filter))
    async def add_word_handler(client, message):
        logger.info(f"/addword –æ—Ç {message.from_user.id if message.from_user else 'N/A'} –≤ —á–∞—Ç–µ {message.chat.id}: {message.text}")

        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            logger.warning("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /addword.")
            await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
            return
        word = parts[1].strip()
        if add_keyword(word):
            logger.debug(f"–ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω: {word}")
            await message.reply_text(f"–ö–ª—é—á '{word}' –¥–æ–±–∞–≤–ª–µ–Ω.")

            global KEYWORDS
            KEYWORDS = load_keywords("keywords.txt")
        else:
            logger.warning(f"–ö–ª—é—á –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (—É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç–æ): {word}")
            await message.reply_text("–¢–∞–∫–æ–π –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.")

    @app.on_message(filters.command("delword") & filters.create(owner_filter))
    async def del_word_handler(client, message):
        logger.info(f"/delword –æ—Ç {message.from_user.id if message.from_user else 'N/A'} –≤ —á–∞—Ç–µ {message.chat.id}: {message.text}")
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            logger.warning("–ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delword.")
            await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        word = parts[1].strip()
        if remove_keyword(word):
            logger.debug(f"–ö–ª—é—á —É–¥–∞–ª—ë–Ω: {word}")
            await message.reply_text(f"–ö–ª—é—á '{word}' —É–¥–∞–ª—ë–Ω.")
            global KEYWORDS
            KEYWORDS = load_keywords("keywords.txt")
        else:
            logger.warning(f"–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {word}")
            await message.reply_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @app.on_message(filters.command("showwords") & filters.create(owner_filter))
    async def show_words_handler(client, message):
        logger.info(f"/showwords –æ—Ç {message.from_user.id if message.from_user else 'N/A'} –≤ —á–∞—Ç–µ {message.chat.id}")
        keywords = load_keywords(KEYWORDS_FILE)
        if not keywords:
            logger.info("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç.")
            await message.reply_text("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç.")
            return
        
        text_lines = [f"{i+1}. {keyword}" for i, keyword in enumerate(keywords)]
        full_text = f"üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ({len(keywords)} —à—Ç.):\n\n" + "\n".join(text_lines)
        
        if len(full_text) > 4000:
            logger.info("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏.")
            await message.reply_text(f"üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ({len(keywords)} —à—Ç.):")
            chunk_size = 50
            for i in range(0, len(keywords), chunk_size):
                chunk = keywords[i:i+chunk_size]
                chunk_lines = [f"{i+j+1}. {keyword}" for j, keyword in enumerate(chunk)]
                chunk_text = f"–ß–∞—Å—Ç—å {i//chunk_size + 1}:\n" + "\n".join(chunk_lines)
                await message.reply_text(chunk_text)
        else:
            await message.reply_text(full_text)

    @app.on_message(filters.command(["addword", "addkey"]) & filters.private & filters.me)
    async def add_word_self_handler(client, message):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –ª—é–±–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –æ—Ç —Å–µ–±—è).
        –ü—Ä–∏–º–µ—Ä: /addword —Å–ª–æ–≤–æ
        """
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /addword –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
            return
        word = parts[1].strip()
        if add_keyword(word, KEYWORDS_FILE):
            await message.reply_text(f"–ö–ª—é—á '{word}' –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await message.reply_text("–¢–∞–∫–æ–π –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.")

    @app.on_message(filters.command(["delword", "delkey"]) & filters.private & filters.me)
    async def del_word_self_handler(client, message):
        """
        –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –ª—é–±–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –æ—Ç —Å–µ–±—è).
        –ü—Ä–∏–º–µ—Ä: /delword —Å–ª–æ–≤–æ
        """
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /delword –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
            return
        word = parts[1].strip()
        if remove_keyword(word, KEYWORDS_FILE):
            await message.reply_text(f"–ö–ª—é—á '{word}' —É–¥–∞–ª—ë–Ω.")
        else:
            await message.reply_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @app.on_message(filters.command(["showwords", "listkeys"]) & filters.private & filters.me)
    async def show_words_self_handler(client, message):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
        """
        keywords = load_keywords(KEYWORDS_FILE)
        if not keywords:
            await message.reply_text("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        text_lines = [f"{i+1}. {keyword}" for i, keyword in enumerate(keywords)]
        full_text = f"üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ({len(keywords)} —à—Ç.):\n\n" + "\n".join(text_lines)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(full_text) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await message.reply_text(f"üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ({len(keywords)} —à—Ç.):")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 50 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            chunk_size = 50
            for i in range(0, len(keywords), chunk_size):
                chunk = keywords[i:i+chunk_size]
                chunk_lines = [f"{i+j+1}. {keyword}" for j, keyword in enumerate(chunk)]
                chunk_text = f"–ß–∞—Å—Ç—å {i//chunk_size + 1}:\n" + "\n".join(chunk_lines)
                await message.reply_text(chunk_text)
        else:
            await message.reply_text(full_text)

    @app.on_message(filters.command(["addwords", "addkeys"]) & filters.private & filters.me)
    async def add_words_init_handler(client, message):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ FSM
        """
        PENDING_ACTIONS[message.from_user.id] = 'ADD_WORDS'
        await message.reply_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. "
            "–ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."
        )

    @app.on_message(
        filters.text & filters.private & filters.me &
        filters.create(lambda _, __, message: PENDING_ACTIONS.get(message.from_user.id) == 'ADD_WORDS')
    )
    async def add_words_fsm_handler(client, message):
        """
        FSM: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
        """
        text = message.text
        words = text.replace(",", "\n").splitlines()
        added, skipped = [], []
        for w in words:
            w = w.strip()
            if not w:
                continue
            if add_keyword(w, KEYWORDS_FILE):
                added.append(w)
            else:
                skipped.append(w)
        reply = []
        if added:
            reply.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(added)}")
        if skipped:
            reply.append(f"–ü—Ä–æ–ø—É—â–µ–Ω—ã (—É–∂–µ –µ—Å—Ç—å/–ø—É—Å—Ç–æ): {', '.join(skipped)}")
        await message.reply_text("\n".join(reply) if reply else "–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        PENDING_ACTIONS.pop(message.from_user.id, None)
        # –¥–∞–ª–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥—Ä—É–≥–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º

    @app.on_message(filters.command("help") & filters.private & filters.me)
    async def help_self_handler(client, message):
        """
        –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º userbot.
        """
        help_text = (
            "Userbot: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (Saved Messages) –∏–ª–∏ –≤ –ª–∏—á–∫–µ –æ—Ç —Å–µ–±—è.\n\n"
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n"
            "/addword <—Å–ª–æ–≤–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á\n"
            "/delword <—Å–ª–æ–≤–æ> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á\n"
            "/addwords <—Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, ...> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n"
            "/delwords <—Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, ...> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n"
            "/showwords ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏\n\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞:\n"
            "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n"
            "/clear_stats ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: /addwords –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ª–∞–≥–∏, –Ω–µ—Ç —Å–≤—è–∑–∏\n"
            "–ò–ª–∏:\n/addwords\n–∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n–ª–∞–≥–∏\n–Ω–µ—Ç —Å–≤—è–∑–∏\n"
            "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª keywords.txt."
        )
        await message.reply_text(help_text)

    @app.on_message(filters.command(["stats", "quality"]) & filters.private & filters.me)
    async def stats_handler(client, message):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        """
        from src.quality_monitor import create_quality_report
        
        try:
            report = create_quality_report()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(report) > 4000:
                parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
                    else:
                        await message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
            else:
                await message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:\n\n{report}")
                
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    @app.on_message(filters.command("clear_stats") & filters.private & filters.me)
    async def clear_stats_handler(client, message):
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
        """
        import os
        
        log_file = "match_quality.log"
        if os.path.exists(log_file):
            os.remove(log_file)
            await message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—á–∏—â–µ–Ω–∞.")
        else:
            await message.reply_text("üìä –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @app.on_message(filters.text)
    async def all_messages_handler(client, message):
        logger.debug(f"all_messages_handler: chat_id={message.chat.id}, chat_type={message.chat.type}, user_id={getattr(message.from_user, 'id', None)}, text={message.text[:50] if message.text else ''}")
        try:
            text = message.text or ""
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
            matched = simple_keyword_match(text, fuzz_threshold=FUZZY_THRESHOLD)
            if matched:
                logger.info(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{matched}' –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
                notify_text = (
                    f"üîî –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É: '{matched}'\n"
                    f"–ß–∞—Ç: {message.chat.title or message.chat.id} ({message.chat.type})\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name if message.from_user else 'N/A'}\n"
                    f"–¢–µ–∫—Å—Ç:\n{text[:500]}"
                )
                if str(message.chat.id).startswith("-100") and hasattr(message, "id"):
                    chat_id_num = str(message.chat.id)[4:]
                    notify_text += f"\n[–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ](https://t.me/c/{chat_id_num}/{message.id})"
                await client.send_message("me", notify_text, disable_web_page_preview=True)
                try:
                    await client.forward_messages("me", message.chat.id, message.id)
                    logger.debug(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –∏–∑ —á–∞—Ç–∞ {message.chat.id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
                except ValueError as e:
                    if "Peer id invalid" in str(e):
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: Peer id invalid ({message.chat.id}). –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, userbot –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ Pyrogram –Ω–µ –≤–∏–¥–∏—Ç –µ–≥–æ –≤ —Å–µ—Å—Å–∏–∏. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {e}")
                    else:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                except Exception as e:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    # --- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ ---
    # def smart_find_match(text, keywords, context="", threshold=85):
    #     ...
    # def _validate_match(norm_text, matched_norm, full_context):
    #     ...
    # def _is_contextually_relevant(text):
    #     ...
    # def analyze_match_quality(text, matched_keyword):
    #     ...
